" set mapleader
filetype off " required! /** 从这行开始，vimrc配置 **/"
let mapleader = ","
let g:mapleader = ","

"安装vundle
set rtp+=~/.vim/bundle/Vundle.vim/ "载入特定目录插件
call vundle#rc()

filetype on "允许文件类型
filetype indent on "针对不同的文件类型采用不同的缩进格式
filetype plugin on "允许插件
filetype plugin indent on " 开启插件

set history=50 " 历史纪录数
syntax enable "打开语法高亮
syntax on " 自动语法高亮
set number " 显示行号
set spell "开启拼写检查功能
set backspace=2 "设置按delete键的时候可往左删除
set nocompatible " 关闭 vi 兼容模式
set cursorcolumn "突出显示当前行等
set cursorline " 突出显示当前行

"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
"好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=

" 开启代码折叠功能
" 根据当前代码行的缩进来进行代码折叠
set foldmethod=indent 
set foldlevel=99

set mouse= "允许使用鼠标,设值为a后虽然可以使用鼠标，但是却屏蔽了鼠标右键功能，
"导致不能复制粘贴，所以还不是设为a了，还是设为空吧
set novisualbell "去掉输入错误时的提示音
set noerrorbells "去掉输入错误时的提示音
set t_vb= " 置空错误铃声的终端代码
set magic "正则表达式设置哪些元字符需要加反斜杠
autocmd InsertLeave * se nocul "用浅色高亮当前行
autocmd InsertEnter * se cul "用浅色高亮当前行
set smartindent " 智能对齐
set autoindent " 自动对齐
set autoread "文件修改之后自动载入
set shortmess=atI "启动的时候不显示那个援助索马里儿童的提示
set confirm " 在处理未保存或只读文件的时候，弹出认
set ruler " 打开状态栏标尺
set shiftwidth=4 " 设定 << 和 >> 命令移动时的宽度为 4
set softtabstop=4 " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4 " 设定 tab 长度为 4
set nobackup " 覆盖文件时不备份
set noswapfile "关闭交换文件
set autochdir " 自动切换当前目录为当前文件所在的目录
set backupcopy=yes " 设置备份时的行为为覆盖
set ignorecase "搜索时忽略大小写 
set smartcase " 但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan " 禁止在搜索到文件两端时重新搜索
set incsearch " 输入搜索内容时就显示搜索结果
set hlsearch " 搜索时高亮显示被找到的文本
set expandtab " 不要用空格代替制表符
set nowrap "取消换行
set gdefault " 行内替换
set encoding=utf-8 " 编码设置
set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936,utf-16,big5,euc-jp,latin1
set langmenu=zn_CN.UTF-8
set helplang=cn " 语言设置
set laststatus=2 " 总是显示状态行
set showcmd " 在状态行显示目前所执行的命令，未完成的指令片段亦会显示出来
set showmode "左下角显示当前vim模式
set scrolloff=5 "上下移动光标时，光标的上方或下方至少会保留显示的行数
set showmatch " 高亮显示对应的括号
set matchtime=5 " 对应括号高亮的时间（单位是十分之一秒）
set wildmenu " 增强模式中的命令行自动完成操作
set linespace=2 " 字符间插入的像素行数目
set tabstop=4     " 设置Tab键的宽度
set shiftwidth=4  " 每一次缩进对应的空格数
set softtabstop=4 " 按退格键时可以一次删掉 4 个空格
set smarttab      " 按退格键时可以一次删掉 4 个空格
set expandtab     " 将Tab自动转化成空格
set shiftround    " 缩进时，取整
set ffs=unix,dos,mac "Use Unix as the standard file type
set formatoptions+=m " 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=B " 合并两行中文时，不在中间加空格
set completeopt=longest,menu "让Vim的补全菜单行为与一般IDE一致
set wildmenu " 增强模式中的命令行自动完成操作
set wildignore=*.o,*~,*.pyc,*.class "忽略编译文件


autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。


" 相对行号      行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>

" 定义函数AutoSetFileHead，自动插入文件头，编写脚本时就不用自己写文件头了
autocmd BufNewFile *.sh exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    normal G
    normal o
    normal o
endfunc

"设置Vim的粘贴模式
function! WrapForTmux(s)
    if !exists('$TMUX')
        return a:s
    endif

    let tmux_start = "\<Esc>Ptmux;"
    let tmux_end = "\<Esc>\\"

    return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') .
    tmux_end
endfunc

let $t_SI .= WrapForTmux("\<Esc>[?2004h")
let $t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunc
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>" 

"输入大括号后回车光标置于下一行向右缩进4个空格（一个tab）
"imap是输入模式
imap { {}<ESC>i<CR><ESC>ko
"解释：
"<ESC>就是按键盘的ESC键，切换到命令行模式
"i 就是按键盘的i键，进入插入模式
"<CR> 即按回车，此时将右括号换行
"<ESC> 重新回到命令行模式
"k 移到上一行
"o 换行并移到一个tab且进入输入模式

"直接把;当成:  这样可快速进入命令行
nnoremap ; :

" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

"选中全部，快捷键为：,sa
map <leader>sa ggVG"

"选中块，快捷键为：,v
nnoremap <leader>v V`}

"U快捷键为对撤销的撤销
nnoremap U <C-r>
map Y y$

" kj 替换 Esc , 以便快速进入命令模式
inoremap kj <Esc>


" 设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

"防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline

"安装插件列表
"vim插件管理器
Bundle 'gmarik/vundle'
Bundle 'vim-godef'
Bundle 'Vundle.vim'

"vim的golang环境
Bundle 'fatih/vim-go' 
" vim-go快捷键设置,因为平常只用run,build,test,所以只设置这三个
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>i <Plug>(go-install)
au FileType go nmap <leader>gd <Plug>(go-def)
au FileType go nmap <leader>gc <Plug>(go-doc)
" vim-go settings
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
let g:go_play_open_browser = 0
let g:go_get_update = 0

"编程语言自动提示
Bundle 'Valloric/YouCompleteMe'
"默认配置文件路径"
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
"python解释器路径"
let g:ycm_python_binary_path = '/usr/local/bin/python'
"是否开启语义补全"
let g:ycm_seed_identifiers_with_syntax=1
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1  
let g:ycm_collect_identifiers_from_comments_and_strings = 1
"开始补全的字符数"
let g:ycm_min_num_of_chars_for_completion=2
"补全后自动关闭预览窗口"
let g:ycm_autoclose_preview_window_after_completion=1
" 禁止缓存匹配项,每次都重新生成匹配项"
let g:ycm_cache_omnifunc=0
"字符串中也开启补全"
let g:ycm_complete_in_strings = 1
"离开插入模式后自动关闭预览窗口"
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" 跳转到定义处, 分屏打开
let g:ycm_goto_buffer_command = 'horizontal-split'
" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>ed :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>hd :YcmCompleter GoToDeclaration<CR>

"多语言语法检查
Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let python_highlight_all=1
"修改高亮的背景颜色，适应主题
highlight SyntasticErrorSign guifg=white guibg=black

"支持自定义文本对象
Bundle 'kana/vim-textobj-user.git'
"增加行文本对象
Bundle 'kana/vim-textobj-line'
"增加文件文本对象
Bundle 'kana/vim-textobj-entire.git'
"增加缩进文本对象
Bundle 'kana/vim-textobj-indent.git'

" 选中区块
Bundle 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)

"多光标选中编辑
Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc'

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>

" 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'

" ################### 快速导航 ###################
"目录导航
Bundle 'scrooloose/nerdtree'
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'

Bundle 'jistr/vim-nerdtree-tabs'
map <leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0

" 标签导航
Bundle 'majutsushi/tagbar'
nmap <leader>tb :TagbarOpen fjc<CR>
let g:tagbar_autofocus = 1
" go语言的tagbar配置
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

"Golang的gocode
Bundle 'Blackrush/vim-gocode'

"" 主题 molokai
Bundle 'tomasr/molokai'
"let g:molokai_original = 1
"let g:rehash256 = 1

" 主题 solarized
Bundle 'altercation/vim-colors-solarized'
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"

Bundle 'morhetz/gruvbox'
Bundle 'flazz/vim-colorschemes'

" theme主题
set background=dark
set t_Co=256
colorscheme solarized

Bundle 'kien/ctrlp.vim'
let g:ctrlp_map = '<c-p>' 
let g:ctrlp_cmd = 'CtrlP'
" 设置过滤不进行查找的后缀名 
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|pyc)$'

"缩进指示线"
Bundle 'Yggdroot/indentLine'
let g:indentLine_char='┆'
let g:indentLine_enabled = 1

"autopep8设置"
Bundle 'tell-k/vim-autopep8'
let g:autopep8_disable_show_diff=1
"let g:autopep8_on_save = 1
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

" 快速注释
Bundle 'scrooloose/nerdcommenter'
map <F4> <leader>ci <CR>

"按F5运行python
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'python'
        exec "!time python %"
    endif
endfunc
